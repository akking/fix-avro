import org.quickfixj.*;
import quickfix.*;
import quickfix.DataDictionary;
import quickfix.DataDictionary.Exception;
import quickfix.DataDictionary.GroupInfo;
import quickfix.fix44.Advertisement;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static String decodeType(String fixType) {
        switch (fixType) {
        case "PERCENTAGE":
        case "CURRENCY":
        case "FLOAT":
        case "PRICEOFFSET":
        case "INT":
        case "QTY":
            return "number";
        case "LOCALMKTDATE":
            return "Date";
        case "STRING":
        case "CHAR":
        case "MONTHYEAR":
        case "COUNTRY":
            return "string";
        case "MULTIPLEVALUESTRING":
            return "string[]";
        default:
            return fixType;

        }
    }

    public static void main(String[] args) {
        try {
            quickfix.fix50sp2.NewOrderSingle dd = new quickfix.fix50sp2.NewOrderSingle();
            quickfix.DataDictionary dict = new DataDictionary("FIX44.xml");
            for (int i : dict.getOrderedFields()) {
                if (dict.isMsgField("D", i)) {
                    String fieldName = dict.getFieldName(i);
                    int fieldType = dict.getFieldType(i);
                    Boolean required = dict.isRequiredField("D", i);
                    FieldType ee = dict.getFieldTypeEnum(i);
                    Boolean group = dict.isGroup("D", i);
                    String fieldTypeName = decodeType(ee.getName());
                    if (group) {
                        GroupInfo groupInfo = dict.getGroup("D", i);
                        DataDictionary ddd = groupInfo.getDataDictionary();
                        fieldTypeName = "{\n";
                        for (int di : ddd.getOrderedFields()) {
                            fieldTypeName += "\t\t" + dict.getFieldName(di) + " : " + decodeType(dict.getFieldTypeEnum(di).getName()) + "\n";
                            // System.out.format("\t\t%d %s \n", di, dict.getFieldName(di));
                        }
                        fieldTypeName +="}";
                    }
                    System.out.format("\t%s %s: %s%s\n", fieldName, required ? "" : "?", fieldTypeName,group ? "[]" : "");
                }
            }
        } catch (ConfigError e) {
            System.out.format("Error " + e.getMessage());
        }

    }
}
