import org.quickfixj.*;
import quickfix.*;
import quickfix.DataDictionary;
import quickfix.DataDictionary.Exception;
import quickfix.DataDictionary.GroupInfo;
import quickfix.fix44.Advertisement;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.IntStream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static boolean isArray(String fixType) {
        if (fixType == "MULTIPLEVALUESTRING")
            return true;
        return false;
    }

    public static String decodeType(String fixType) {
        switch (fixType) {
        case "PERCENTAGE":
        case "CURRENCY":
        case "FLOAT":
        case "PRICEOFFSET":
        case "QTY":
        case "PRICE":
        case "AMT":
            return "double";
        case "INT":
        case "LENGTH":
            return "long";
        case "BOOLEAN":
            return "boolean";
        case "UTCTIMESTAMP":
        case "LOCALMKTDATE":
            return "string";
        case "DATA":
            return "bytes";
        case "STRING":
        case "CHAR":
        case "MONTHYEAR":
        case "COUNTRY":
        case "MULTIPLEVALUESTRING":
            return "string";
        default:
            return "#ERR " + fixType;
        }
    }

    public static String fieldLine(String fieldName, String fieldType, boolean optional, boolean array) {
        ArrayList<String> fields = new ArrayList<>();
        fields.add("\"name\": \"" + fieldName.charAt(0) + fieldName.substring(1) + "\" ");
        String type = "\"" + decodeType(fieldType) + "\"";
        if (array) {
            fields.add("\"items\": " + type);
            type = "array";
        }
        if (optional) {
            type = "[ null, " + type + " ]";
        }
        fields.add("\"type\": " + type);
        return "\t\t{ " + String.join(", ", fields) + " }";
    }

    private static java.util.List<String> createType(String name, quickfix.DataDictionary dict, int[] fields, String messageId) {
        java.util.List<String> output = new java.util.LinkedList<>();
        java.util.List<String> dependencies = new java.util.LinkedList<>();
        for (int i : fields) {
            String fieldName = dict.getFieldName(i);
            // int fieldType = dict.getFieldType(i);
            Boolean required = dict.isRequiredField(messageId, i);
            FieldType ee = dict.getFieldTypeEnum(i);

            Boolean group = dict.isGroup("D", i);
            String fieldTypeName = ee == null ? "UNKNOWN" : ee.getName();
            boolean isArrayField = isArray(fieldTypeName);
            String fieldLineDef = fieldLine(fieldName, group ? fieldName + "Type" : fieldTypeName, !required,
                    group || isArrayField);
            output.add(fieldLineDef);

            if (group) {
                GroupInfo groupInfo = dict.getGroup("D", i);
                DataDictionary ddd = groupInfo.getDataDictionary();
                dependencies.addAll(createType(fieldName + "Type", dict, ddd.getOrderedFields(),messageId));
            }
        }
        dependencies.add("{\n\t\"type\": \"record\",\n\t\"name\": \"" + name + "\",\n\t\"fields\": [\n"
        + String.join(",\n",output)
        + "\n\t]\n}");

        return dependencies;
    }

    public static void main(String[] args) {
        try {
            if (args.length==0 || args[0]=="--help"){
                System.out.println("Use fix-avro <message-name> [FIX44|FIX50]");
                return;
            }
            final String vers = (args.length>1) ? args[1] : "FIX50";
            final String messageName = args[0];
            quickfix.DataDictionary dict = new DataDictionary(vers +".xml");
            final String messageId = dict.getMsgType(messageName);
            // quickfix.fix50sp2.NewOrderSingle dd = new quickfix.fix50sp2.NewOrderSingle();
            IntStream orderedFields = IntStream.of(dict.getOrderedFields());
            int[] filtered = orderedFields.filter(i -> dict.isMsgField(messageId, i)).toArray();
            
            List<String> output = createType(messageName, dict, filtered, messageId);
            System.out.println(String.join(",\n",output));
        } catch (ConfigError e) {
            System.out.format("Error " + e.getMessage());
        }

    }
}
